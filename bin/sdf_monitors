#! /bin/bash

# determine script path
pushd `dirname $0` > /dev/null
SCRIPTPATH=`pwd`
popd > /dev/null

# log output to a file
logfile=$SCRIPTPATH/../logs/monitor_hotplug.log
exec > $logfile 2>&1
export DISPLAY=:0.0

#export BSPWM_SOCKET=/tmp/bspwm*-socket
HOME=/home/CORP.INSTRUCTURE.COM/bhorrocks
PATH=/usr/local/bin:/usr/bin:$PATH
export XAUTHORITY=$HOME/.Xauthority

# this seems to make it more reliable
# i think its due to the event firing before
# the outputs show up in xrandr
# sleep 0.5

desktops=(     )
active_displayport_monitor=`xrandr -q | grep -P '\bcon' | cut -d ' ' -f 1 | grep -P '^DP'`
inactive_monitors=`xrandr -q | grep -P '\bdiscon' | cut -d ' ' -f 1`
internal_monitor=`xrandr -q | grep -P '\bcon' | cut -d ' ' -f 1 | grep -P '^eDP'`
external_monitor_connected=`xrandr -q | grep -P '\b'$active_displayport_monitor' connected' | wc -l`

if [ "$active_displayport_monitor" == "" ] ; then
  external_monitor_connected=0
fi
echo "Internal monitor: $internal_monitor"
echo "External monitor: $active_displayport_monitor"
echo "  connected: $external_monitor_connected"

action="$1"

if [ "$action" == "" ]; then
  action="auto"
fi

if [ "$action" == "internal" ] ; then
  xrandr --output $internal_monitor --auto --output $active_displayport_monitor --off
elif [ "$action" == "external" ] ; then
  xrandr --output $active_displayport_monitor --auto --output $internal_monitor --off
elif [ "$action" == "auto" ] ; then
  # auto magic mode
  if [ $external_monitor_connected -eq 1 ]; then
      xrandr --output $internal_monitor --mode 3840x2160 --pos 0x0 --output $active_displayport_monitor --mode 3840x2160 --pos 3840x0 --rotate normal -r 29.98
  else
    for i in $inactive_monitors; do
      disable_command="$disable_command --output $i --off"
    done

      # xrandr --output $internal_monitor --off
      xrandr --output $internal_monitor --auto $disable_command
  fi
fi
